class Event: ...

class Dataset:
    def __getitem__(self, index: int) -> Event: ...
    def __len__(self) -> int: ...
    def split_m(
        self,
        range: tuple[float, float],  # noqa: A002
        bins: int,
        p1_indices: list[float] | None = None,
        p2_indices: list[float] | None = None,
    ) -> tuple[list[Dataset], Dataset, Dataset]: ...
    @staticmethod
    def from_dict(data: dict[str, list[float | list[float]]]) -> Dataset: ...
    @staticmethod
    def from_parquet(path: str) -> Dataset: ...
    @staticmethod
    def from_parquet_eps_in_beam(path: str) -> Dataset: ...
    @staticmethod
    def from_parquet_with_eps(path: str, eps: list[float]) -> Dataset: ...
    @staticmethod
    def from_parquet_unpolarized(path: str) -> Dataset: ...
    @staticmethod
    def from_root(path: str) -> Dataset: ...
