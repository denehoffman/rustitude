from pathlib import Path
from typing import Self, overload

__version__: str

class Parameter:
    amplitude: str
    name: str
    index: int | None
    fixed_index: int | None
    initial: float
    bounds: tuple[float, float]

    def __init__(self, amplitude: str, name: str, index: int) -> None: ...

class AmpOp:
    def print_tree(self): ...
    def real(self) -> Self: ...
    def imag(self) -> Self: ...
    def __add__(self, other: Self | CohSum) -> CohSum: ...
    @overload
    def __mul__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: CohSum) -> CohSum: ...

def Scalar(name: str) -> AmpOp: ...
def CScalar(name: str) -> AmpOp: ...
def PCScalar(name: str) -> AmpOp: ...
def PiecewiseM(name: str, bins: int, range: tuple[float, float]) -> AmpOp: ...

class Amplitude:
    name: str
    active: bool
    cache_position: int
    parameter_index_start: int

class CohSum:
    def __init__(self, terms: list[AmpOp]) -> None: ...
    def __add__(self, other: Self) -> Self: ...
    def __mul__(self, other: AmpOp) -> CohSum: ...

class Model:
    cohsums: list[CohSum]
    amplitudes: list[Amplitude]
    parameters: list[Parameter]
    bounds: list[tuple[float, float]]
    initial: list[float]
    n_free: int

    def __init__(self, cohsums: list[CohSum]) -> None: ...
    def get_parameter(self, amplitude_name: str, parameter_name: str) -> Parameter | None: ...
    def print_parameters(self) -> None: ...
    def constrain(
        self, amplitude_1: str, parameter_1: str, amplitude_2: str, parameter_2: str
    ) -> None: ...
    def fix(self, amplitude_1: str, parameter_1: str, value: float) -> None: ...
    def free(self, amplitude_1: str, parameter_1: str) -> None: ...
    def set_bounds(
        self, amplitude_1: str, parameter_1: str, bounds: tuple[float, float]
    ) -> None: ...
    def set_initial(self, amplitude_1: str, parameter_1: str, initial: float) -> None: ...
    def activate(self, amplitude: str) -> None: ...
    def deactivate(self, amplitude: str) -> None: ...

class FourMomentum:
    e: float
    px: float
    py: float
    pz: float
    m: float
    m2: float

    def __init__(self, e: float, px: float, py: float, pz: float) -> None: ...
    def set_e(self, value: float) -> None: ...
    def set_px(self, value: float) -> None: ...
    def set_py(self, value: float) -> None: ...
    def set_pz(self, value: float) -> None: ...
    def boost_along(self, other: FourMomentum) -> float: ...
    def __add__(self, other: FourMomentum) -> FourMomentum: ...
    def __sub__(self, other: FourMomentum) -> FourMomentum: ...

class Event:
    index: int
    weight: float
    beam_p4: FourMomentum
    recoil_p4: FourMomentum
    daughter_p4s: list[FourMomentum]
    eps: list[float]

class Dataset:
    events: list[Event]
    weights: list[float]

    def __getitem__(self, index: int) -> Event: ...
    def __len__(self) -> int: ...
    def split_m(
        self,
        range: tuple[float, float],  # noqa: A002
        bins: int,
        p1_indices: list[float] | None = None,
        p2_indices: list[float] | None = None,
    ) -> tuple[list[Dataset], Dataset, Dataset]: ...
    @staticmethod
    def from_events(events: list[Event]) -> Dataset: ...
    @staticmethod
    def from_dict(data: dict[str, list[float | list[float]]]) -> Dataset: ...
    @staticmethod
    def from_parquet(path: str) -> Dataset: ...
    @staticmethod
    def from_parquet_eps_in_beam(path: str) -> Dataset: ...
    @staticmethod
    def from_parquet_with_eps(path: str, eps: list[float]) -> Dataset: ...
    @staticmethod
    def from_parquet_unpolarized(path: str) -> Dataset: ...
    @staticmethod
    def from_root(path: str) -> Dataset: ...

def open(
    file_name: str | Path, tree_name: str | None = None, *, pol_in_beam: bool = False
) -> Dataset: ...  # noqa: A001

class Manager:
    root: AmpOp
    amplitudes: list[Amplitude]
    parameters: list[Parameter]
    bounds: list[tuple[float, float]]
    initial: list[float]
    n_free: int

    def __init__(self, model: Model, dataset: Dataset) -> None: ...
    def __call__(self, parameters: list[float]) -> list[float]: ...
    def norm_int(self, parameters: list[float]) -> list[float]: ...
    def fix(self, amplitude_1: str, parameter_1: str, value: float) -> None: ...
    def free(self, amplitude_1: str, parameter_1: str) -> None: ...
    def set_bounds(
        self, amplitude_1: str, parameter_1: str, bounds: tuple[float, float]
    ) -> None: ...
    def set_initial(self, amplitude_1: str, parameter_1: str, initial: float) -> None: ...
    def activate(self, amplitude: str) -> None: ...
    def deactivate(self, amplitude: str) -> None: ...

class ExtendedLogLikelihood:
    root: AmpOp
    amplitudes: list[Amplitude]
    parameters: list[Parameter]
    bounds: list[tuple[float, float]]
    initial: list[float]
    n_free: int

    def __init__(self, data_manager: Manager, mc_manager: Manager) -> None: ...
    def __call__(self, parameters: list[float], *, num_threads: int = 1) -> float: ...
    def norm_int(
        self, parameters: list[float], *, num_threads: int = 1, weighted: bool = True
    ) -> float: ...
    def fix(self, amplitude_1: str, parameter_1: str, value: float) -> None: ...
    def free(self, amplitude_1: str, parameter_1: str) -> None: ...
    def set_bounds(
        self, amplitude_1: str, parameter_1: str, bounds: tuple[float, float]
    ) -> None: ...
    def set_initial(self, amplitude_1: str, parameter_1: str, initial: float) -> None: ...
    def activate(self, amplitude: str) -> None: ...
    def deactivate(self, amplitude: str) -> None: ...
